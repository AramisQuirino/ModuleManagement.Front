@using ModuleManagement.Web.Client.Models
@using ModuleManagement.Web.Client.Services
@inherits LayoutComponentBase
@inject LanguageService LanguageService
@inject IConfigurationService ConfigService
@inject ColorSchemeStateService ColorSchemeState

<div class="flex h-screen" style="background-color: @currentColorScheme.SecondaryColor">
    <!-- Sidebar (barra lateral) -->
    <aside class="@SidebarCssClass text-white flex flex-col transition-all duration-300 ease-in-out" style="background-color: @currentColorScheme.PrimaryColor">
        <!-- Branding -->
        <div class="flex items-center h-16 px-4 border-b" style="border-color: @currentColorScheme.TertiaryColor">
            @if (!IsCollapsed)
            {
                <span class="font-bold text-xl">SystemPro</span>
            }
            else
            {
                <span class="font-bold text-xl">SP</span>
            }
        </div>
        <!-- Opciones de menú -->
        <nav class="mt-2 space-y-2 @(IsCollapsed ? "" : "overflow-y-auto")">
            <!-- Ejemplo de enlace: Agenda -->
            <div class="relative group">
                <NavLink class="@NavLinkClass" href="/multischeduler" Match="NavLinkMatch.All">
                    <span class="bi bi-calendar-day text-2xl"></span>
                    @if (!IsCollapsed)
                    {
                        <span class="ml-2">@LanguageService.Translate("SchedulerTitle")</span>
                    }
                </NavLink>
                @if (IsCollapsed)
                {
                    <span class="pointer-events-none absolute left-full top-1/2 transform -translate-y-1/2 ml-2 whitespace-nowrap bg-gray-900 text-white text-xs rounded px-2 py-1 opacity-0 group-hover:opacity-100 transition-opacity duration-200 z-50">
                        @LanguageService.Translate("SchedulerTitle")
                    </span>
                }
            </div>
            <!-- Ejemplo de enlace: Clientes -->
            <div class="relative group">
                <NavLink class="@NavLinkClass" href="/clients" Match="NavLinkMatch.All">
                    <span class="bi bi-person-lines-fill text-2xl"></span>
                    @if (!IsCollapsed)
                    {
                        <span class="ml-2">@LanguageService.Translate("ClientTitle")</span>
                    }
                </NavLink>
                @if (IsCollapsed)
                {
                    <span class="pointer-events-none absolute left-full top-1/2 transform -translate-y-1/2 ml-2 whitespace-nowrap bg-gray-900 text-white text-xs rounded px-2 py-1 opacity-0 group-hover:opacity-100 transition-opacity duration-200 z-50">
                        @LanguageService.Translate("ClientTitle")
                    </span>
                }
            </div>
            <!-- Enlace: Configuración -->
            <div class="relative group">
                <NavLink class="@NavLinkClass" href="/configuration">
                    <span class="bi bi-gear-wide-connected text-2xl"></span>
                    @if (!IsCollapsed)
                    {
                        <span class="ml-2">@LanguageService.Translate("ConfigurationTitle")</span>
                    }
                </NavLink>
                @if (IsCollapsed)
                {
                    <span class="pointer-events-none absolute left-full top-1/2 transform -translate-y-1/2 ml-2 whitespace-nowrap bg-gray-900 text-white text-xs rounded px-2 py-1 opacity-0 group-hover:opacity-100 transition-opacity duration-200">
                        @LanguageService.Translate("ConfigurationTitle")
                    </span>
                }
            </div>
        </nav>
    </aside>
    <!-- Contenido principal -->
    <div class="flex-1 flex flex-col">
        <!-- Header -->
        <header class="flex items-center shadow px-4 h-16" style="background-color: @currentColorScheme.TertiaryColor">
            <button class="text-indigo-700 mr-4" @onclick="ToggleSidebar">
                <span class="bi bi-list text-2xl"></span>
            </button>
            <div class="flex-1"></div>
            <div class="flex items-center space-x-4">
                <div class="relative">
                    <button @onclick="ToggleLanguageDropdown" class="flex items-center px-3 py-2 bg-gray-100 rounded shadow-sm focus:outline-none">
                        <span class="mr-2 text-gray-800">@CurrentLanguageLabel</span>
                        <svg class="w-4 h-4 text-gray-600" fill="currentColor" viewBox="0 0 20 20">
                            <path fill-rule="evenodd" d="M5.23 7.21a.75.75 0 011.06.02L10 10.94l3.71-3.71a.75.75 0 111.06 1.06l-4.24 4.24a.75.75 0 01-1.06 0L5.25 8.29a.75.75 0 01-.02-1.06z" clip-rule="evenodd" />
                        </svg>
                    </button>
                    @if (IsLanguageDropdownOpen)
                    {
                        <div class="absolute right-0 mt-2 w-40 bg-white border rounded shadow-lg z-50">
                            <a href="#" @onclick="@(() => ChangeLanguage("es"))" class="block px-4 py-2 text-gray-700 hover:bg-gray-100">
                                🇪🇸 Español
                            </a>
                            <a href="#" @onclick="@(() => ChangeLanguage("en"))" class="block px-4 py-2 text-gray-700 hover:bg-gray-100">
                                🇬🇧 Inglés
                            </a>
                        </div>
                    }
                </div>
                <div class="flex items-center space-x-2">
                    <span class="bi bi-person-circle text-2xl text-gray-700"></span>
                    <span class="text-gray-700">User full name</span>
                </div>
            </div>
        </header>
        <!-- Cuerpo -->
        <main class="flex-1 p-4 overflow-auto bg-gray-100">
            @Body
        </main>
    </div>
</div>

@code {
    // Estado del sidebar
    private bool collapseNavMenu = false;
    private bool IsCollapsed => collapseNavMenu;
    private string SidebarCssClass => IsCollapsed ? "w-16" : "w-64";

    // Color scheme actual (inicializado por defecto)
    private ColorScheme currentColorScheme = new ColorScheme { PrimaryColor = "#1b6ec2", SecondaryColor = "#f3f4f6", TertiaryColor = "#3b82f6" };

    // Clases para los NavLink
    private string NavLinkClass
    {
        get
        {
            var baseClasses = "flex items-center px-4 py-2 hover:bg-indigo-600 hover:text-white transition-colors duration-200";
            var alignment = IsCollapsed ? "justify-center" : "justify-start";
            return $"{baseClasses} {alignment}";
        }
    }

    // Alternar sidebar
    private void ToggleSidebar() => collapseNavMenu = !collapseNavMenu;

    // Control del dropdown de idiomas
    private bool IsLanguageDropdownOpen = false;
    private string CurrentLanguageLabel => LanguageService.CurrentLanguage == "es" ? "Español" : "Inglés";
    private void ToggleLanguageDropdown() => IsLanguageDropdownOpen = !IsLanguageDropdownOpen;
    private async Task ChangeLanguage(string lang)
    {
        await LanguageService.SetLanguage(lang);
        IsLanguageDropdownOpen = false;
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            int idCompany = 1; // Ajusta según corresponda
            // Cargar el esquema de colores del API
            currentColorScheme = await ConfigService.GetColorSchemeAsync(idCompany);
            // Actualizar el estado compartido
            ColorSchemeState.SetColorScheme(currentColorScheme);

            var storedLanguage = await LanguageService.GetStoredLanguageAsync();
            await LanguageService.LoadLanguageAsync(storedLanguage);

            // Suscribirse a cambios del color scheme para actualizar el layout en tiempo real
            ColorSchemeState.OnChange += OnColorSchemeChanged;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar la configuración: {ex.Message}");
        }
    }

    private async void OnColorSchemeChanged()
    {
        currentColorScheme = ColorSchemeState.CurrentColorScheme;
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        // Cancelar suscripción cuando el layout se destruya
        ColorSchemeState.OnChange -= OnColorSchemeChanged;
    }
}
